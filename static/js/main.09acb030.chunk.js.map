{"version":3,"sources":["utils.ts","components/TodoForm/TodoForm.tsx","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["fakeUser","id","name","username","email","validationRegex","TodoForm","props","todos","addTodo","users","useState","title","setTitle","userId","setUserId","reduce","acc","el","lastTodoId","setLastTodoId","hasTitleError","setHasTitleError","hasUserIdError","setHasUserIdError","action","method","onSubmit","event","preventDefault","prevState","completed","user","find","className","htmlFor","type","placeholder","value","onChange","target","replace","disabled","map","UserInfo","href","TodoInfo","todo","cn","TodoList","preparedTodos","usersFromServer","App","setTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.09acb030.chunk.js","sourcesContent":["import { User } from './types/User';\n\nexport const fakeUser: User = {\n  id: -1,\n  name: 'noname',\n  username: 'nousername',\n  email: 'noemail',\n};\n","import React, { useState } from 'react';\nimport './TodoForm.scss';\nimport { PreparedTodo } from '../../types/PreparedTodo';\nimport { User } from '../../types/User';\n\nimport { fakeUser } from '../../utils';\n\nconst validationRegex = /[^a-zA-Zа-яА-Я0-9\\s]/g;\n\ninterface Props {\n  todos: PreparedTodo[],\n  addTodo: (todo: PreparedTodo) => void,\n  users: User[],\n}\n\nexport const TodoForm: React.FC<Props> = (props) => {\n  const {\n    todos,\n    addTodo,\n    users,\n  } = props;\n\n  const [title, setTitle] = useState('');\n  const [userId, setUserId] = useState(0);\n  const [lastTodoId, setLastTodoId] = useState(todos\n    .reduce((acc, el) => (el.id > acc ? el.id : acc), 0));\n\n  const [hasTitleError, setHasTitleError] = useState(false);\n  const [hasUserIdError, setHasUserIdError] = useState(false);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (title && userId) {\n      setLastTodoId(prevState => prevState + 1);\n\n      addTodo({\n        id: lastTodoId + 1,\n        title,\n        completed: false,\n        userId,\n        user: users.find(({ id }) => id === userId) ?? fakeUser,\n      });\n\n      setTitle('');\n      setUserId(0);\n\n      return;\n    }\n\n    if (!title) {\n      setHasTitleError(true);\n    }\n\n    if (!userId) {\n      setHasUserIdError(true);\n    }\n  };\n\n  const handleTitleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value.replace(validationRegex, ''));\n    setHasTitleError(false);\n  };\n\n  const handleUserIdSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setHasUserIdError(false);\n  };\n\n  return (\n    <form\n      action=\"/api/todos\"\n      method=\"POST\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\">\n        <label htmlFor=\"title\">Title: </label>\n        <input\n          id=\"title\"\n          type=\"text\"\n          data-cy=\"titleInput\"\n          placeholder=\"Enter a title\"\n          value={title}\n          onChange={handleTitleInput}\n        />\n\n        {hasTitleError && (\n          <span className=\"error\">Please enter a title</span>\n        )}\n\n      </div>\n\n      <div className=\"field\">\n        <label htmlFor=\"userId\">User: </label>\n        <select\n          id=\"userId\"\n          data-cy=\"userSelect\"\n          value={userId}\n          onChange={handleUserIdSelect}\n        >\n          <option value=\"0\" disabled>Choose a user</option>\n          {users.map(({ id, name }) => (\n            <option\n              value={id}\n              key={id}\n            >\n              {name}\n            </option>\n          ))}\n        </select>\n\n        {hasUserIdError && (\n          <span className=\"error\">Please choose a user</span>\n        )}\n\n      </div>\n\n      <button type=\"submit\" data-cy=\"submitButton\">\n        Add\n      </button>\n    </form>\n  );\n};\n","import './UserInfo.scss';\nimport React from 'react';\nimport { User } from '../../types/User';\n\ninterface Props {\n  user: User | undefined,\n}\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n      {user?.name}\n    </a>\n  );\n};\n","import './TodoInfo.scss';\nimport React from 'react';\nimport cn from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { PreparedTodo } from '../../types/PreparedTodo';\n\ninterface Props {\n  todo: PreparedTodo,\n}\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={cn('TodoInfo', {\n        'TodoInfo--completed': completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      <UserInfo user={user} />\n\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { PreparedTodo } from '../../types/PreparedTodo';\n\ninterface Props {\n  todos: PreparedTodo[],\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n\n      {todos.map(todo => (\n        <TodoInfo\n          todo={todo}\n          key={todo.id}\n          data-id={todo.id}\n        />\n      ))}\n\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import './App.scss';\nimport { useState } from 'react';\nimport { TodoForm } from './components/TodoForm';\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { PreparedTodo } from './types/PreparedTodo';\n\nimport { fakeUser } from './utils';\n\nconst preparedTodos: PreparedTodo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: usersFromServer.find(({ id }) => todo.userId === id) ?? fakeUser,\n}));\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState(preparedTodos);\n\n  const addTodo = (todo: PreparedTodo): void => {\n    setTodos((prevState) => [...prevState, todo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <TodoForm\n        todos={todos}\n        addTodo={addTodo}\n        users={usersFromServer}\n      />\n      <TodoList todos={todos} />\n\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}